from typing import Sequence, Union, Any
from collections import OrderedDict

from numpy import Inf, exp
import pandas as pd

from hbayesdm.base import TaskModel
from hbayesdm.preprocess_funcs import {prefix_preprocess_func}_preprocess_func

__all__ = ['{model_function}']


class {class_name}(TaskModel):
    def __init__(self, **kwargs):
        super().__init__(
            task_name='{task_name}',
            model_name='{model_name}',
            model_type='{model_type}',
            data_columns=(
                {data_columns}
            ),
            parameters=OrderedDict([
                {parameters}
            ]),
            regressors=OrderedDict([
                {regressors}
            ]),
            postpreds=[{postpreds}],
            parameters_desc=OrderedDict([
                {parameters_desc}
            ]),
            additional_args=OrderedDict([
                {additional_args}
            ]),
            additional_args_desc=OrderedDict([
                {additional_args_desc}
            ]),
            **kwargs,
        )

    _preprocess_func = {prefix_preprocess_func}_preprocess_func


def {model_function}(
        data: Union[pd.DataFrame, str, None] = None,
        niter: int = 4000,
        nwarmup: int = 1000,
        nchain: int = 4,
        ncore: int = 1,
        nthin: int = 1,
        inits: Union[str, Sequence[float]] = 'vb',
        ind_pars: str = 'mean',
        model_regressor: bool = False,
        vb: bool = False,
        inc_postpred: bool = False,
        adapt_delta: float = 0.95,
        stepsize: float = 1,
        max_treedepth: int = 10,
        **additional_args: Any) -> TaskModel:
    """{docstring_template}    """
    return {class_name}(
        data=data,
        niter=niter,
        nwarmup=nwarmup,
        nchain=nchain,
        ncore=ncore,
        nthin=nthin,
        inits=inits,
        ind_pars=ind_pars,
        model_regressor=model_regressor,
        vb=vb,
        inc_postpred=inc_postpred,
        adapt_delta=adapt_delta,
        stepsize=stepsize,
        max_treedepth=max_treedepth,
        **additional_args)
